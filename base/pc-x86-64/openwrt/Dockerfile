ARG OS_TYPE
ARG OS_VERSION

# Step 1: build the root filesystem
# ---------------------------------
FROM debian:bullseye as openwrt-builder
ARG OS_VERSION
RUN apt update && apt install -y build-essential git gawk gcc-multilib flex gettext libncurses5-dev libssl-dev python3-distutils zlib1g-dev unzip wget file rsync cpio vim python2 libcap-dev liblzma-dev libldap2-dev libpam0g-dev libgnutls28-dev libidn2-dev libssh2-1-dev libsnmp-dev libjansson-dev curl
WORKDIR /root
RUN git clone https://git.openwrt.org/openwrt/openwrt.git
WORKDIR /root/openwrt
RUN git checkout -b openwrt-v${OS_VERSION} v${OS_VERSION}
RUN ./scripts/feeds update -a
RUN ./scripts/feeds install -a

# notes:
#
# In its default configuration, openwrt does not work properly on
# a network filesystem root. Initial work on this was done by
# RÃ©my Grunblatt and his conclusions are described at:
# https://forum.openwrt.org/t/preventing-the-init-to-mess-with-my-nfs-root-and-network/50357/8
#
# openwrt usually tries to reinit its network interfaces when booting up:
# 1. at preinit unless INITRAMFS env variable is set to 1
# 2. at preinit to handle failsafe mode unless failsafe mode is disabled
#    in menuconfig
# 3. when starting /etc/rc.d/S20network
#
# Reiniting walt network interface obviously causes issues with the network root
# filesystem. We can easily bypass 1 and 2 by providing the appropriate
# settings in the initramfs script and in menuconfig.
# Point 3 is harder to solve, because the service starts a binary
# called 'netifd' which reconfigures the interfaces when starting up,
# by making use of ioctl() calls. So we decided to just disable this
# service by removing this symlink /etc/rc.d/S20network -> /etc/init.d/network.
# 
# file openwrt.config contains only the changes comparing to the
# default configuration. It has been generated by running:
# $ make menuconfig
# $ ./scripts/diffconfig.sh > openwrt.config
#
# file config-5.4 was obtained by adding fuse and nfs client
# builtin features in the kernel (works better than trying to use
# the separate kernel modules available from the global
# openwrt menuconfig, especially considering the several
# nfs versions):
# $ make kernel_menuconfig
#
# When running make, FORCE_UNSAFE_CONFIGURE=1 is needed for running as root.
#
# for debugging, use:
# $ FORCE_UNSAFE_CONFIGURE=1 nice make -j1 V=s [menuconfig|...]
#
COPY base/pc-x86-64/openwrt/config-5.4 target/linux/x86/config-5.4
COPY base/pc-x86-64/openwrt/openwrt.config .config
# comment out uwaterloo mirror (too slow)
RUN sed -i -e 's/\(push .*uwaterloo.*;\)/#\1/g' /root/openwrt/scripts/download.pl
RUN make defconfig
RUN FORCE_UNSAFE_CONFIGURE=1 nice make -j$(nproc)

# create image root filesystem
RUN mkdir /root/rootfs
WORKDIR /root/rootfs
RUN tar xf /root/openwrt/bin/targets/x86/64/openwrt-x86-64-generic-rootfs.tar.gz
WORKDIR /root/rootfs/dev
ADD base/pc-x86-64/openwrt/dev-content.tar.gz .
WORKDIR /root/rootfs
RUN rm etc/rc.d/S*network   # disable network service startup (breaks the running NFS)
RUN mkdir -p etc/walt usr/bin run
COPY overlays/generic overlays/openwrt overlays/ipxe \
     overlays/spec-ipxe-nbfs \
     overlays/pc overlays/mount.nbfs.amd64 /root/rootfs/
WORKDIR /root/rootfs/boot
RUN rm -f System.map-lts config-lts vmlinuz-lts initramfs-lts

# create initramfs
COPY base/pc-x86-64/openwrt/initrd_skeleton /root/initrd
RUN mkdir -p /root/initrd/sbin
RUN mv /root/rootfs/usr/sbin/mount.nbfs /root/initrd/sbin/  # mount.nbfs is only needed in the initrd
COPY base/pc-x86-64/openwrt/create_initramfs.sh /root
RUN /root/create_initramfs.sh

# finalize image root filesystem
RUN cp /root/openwrt/bin/targets/x86/64/*-kernel.bin /root/initramfs.cpio.gz .
WORKDIR /root/rootfs/boot/common-pc
RUN ln -sf ../*-kernel.bin kernel
RUN ln -sf ../initramfs.cpio.gz initrd

# Step 2: Build the final image
# -----------------------------
FROM scratch
# specify which node models this image can handle
LABEL walt.node.models=pc-x86-64
# specify min walt server version needed
LABEL walt.server.minversion=5
# copy file tree prepared above
COPY --from=openwrt-builder /root/rootfs /
# set an entrypoint (handy when debugging)
ENTRYPOINT /bin/sh
